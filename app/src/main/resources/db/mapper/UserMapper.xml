<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.rits.membership.console.iam.infrastructure.db.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="cc.rits.membership.console.iam.infrastructure.db.entity.User"
               extends="cc.rits.membership.console.iam.infrastructure.db.mapper.base.UserBaseMapper.BaseResultMap"/>
    <resultMap id="UserGroupWithRolesResultMap"
               type="cc.rits.membership.console.iam.infrastructure.db.entity.join.UserGroupWithRoles"
               extends="cc.rits.membership.console.iam.infrastructure.db.mapper.UserGroupMapper.UserGroupWithRolesResultMap"/>

    <resultMap id="UserWithUserGroupsResultMap"
               type="cc.rits.membership.console.iam.infrastructure.db.entity.join.UserWithUserGroups"
               extends="BaseResultMap">
        <collection property="userGroups" resultMap="UserGroupWithRolesResultMap" columnPrefix="user_group__">
        </collection>
    </resultMap>

    <select id="selectByEmail" resultMap="UserWithUserGroupsResultMap">
        SELECT DISTINCT user.*,

                        user_group.id                 AS user_group__id,
                        user_group.name               AS user_group__name,

                        user_group_role.user_group_id AS user_group__role__user_group_id,
                        user_group_role.role_id       AS user_group__role__role_id

        FROM user
                 LEFT JOIN r__user__user_group ON r__user__user_group.user_id = user.id
                 LEFT JOIN user_group
                           ON user_group.id = r__user__user_group.user_group_id
                 LEFT JOIN user_group_role ON user_group_role.user_group_id = user_group.id
        WHERE user.email = #{email}
    </select>

    <select id="selectById" resultMap="UserWithUserGroupsResultMap">
        SELECT DISTINCT user.*,

                        user_group.id                 AS user_group__id,
                        user_group.name               AS user_group__name,

                        user_group_role.user_group_id AS user_group__role__user_group_id,
                        user_group_role.role_id       AS user_group__role__role_id

        FROM user
                 LEFT JOIN r__user__user_group ON r__user__user_group.user_id = user.id
                 LEFT JOIN user_group
                           ON user_group.id = r__user__user_group.user_group_id
                 LEFT JOIN user_group_role ON user_group_role.user_group_id = user_group.id
        WHERE user.id = #{id}
    </select>

    <select id="selectAll" resultMap="UserWithUserGroupsResultMap">
        SELECT DISTINCT user.*,

                        user_group.id                 AS user_group__id,
                        user_group.name               AS user_group__name,

                        user_group_role.user_group_id AS user_group__role__user_group_id,
                        user_group_role.role_id       AS user_group__role__role_id

        FROM user
                 LEFT JOIN r__user__user_group ON r__user__user_group.user_id = user.id
                 LEFT JOIN user_group
                           ON user_group.id = r__user__user_group.user_group_id
                 LEFT JOIN user_group_role ON user_group_role.user_group_id = user_group.id
    </select>

    <select id="countByUserGroupId" resultType="java.lang.Long">
        SELECT COUNT(*)

        FROM user
                 LEFT JOIN r__user__user_group ON r__user__user_group.user_id = user.id
        WHERE r__user__user_group.user_group_id = #{userGroupId}
    </select>

    <update id="updatePasswordById">
        UPDATE user
        SET password = #{password}
        WHERE id = #{id}
    </update>

    <insert id="addUserToUserGroups">
        INSERT INTO r__user__user_group (user_id, user_group_id)
        VALUES
        <foreach item="userGroupId" collection="userGroupIds" separator=",">
            (#{userId}, #{userGroupId})
        </foreach>
    </insert>

    <delete id="deleteUserToUserGroups">
        DELETE
        FROM r__user__user_group
        WHERE user_id = #{id}
    </delete>

</mapper>
